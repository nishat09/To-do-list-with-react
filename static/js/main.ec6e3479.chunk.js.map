{"version":3,"sources":["components/todoItems.jsx","components/App.jsx","index.js"],"names":["TodoItems","props","isDone","setIsDone","useState","React","createElement","style","display","justifyContent","alignItems","onClick","prevValue","flex","cursor","textDecoration","item","event","stopPropagation","deleteItem","index","App","inputText","setInputText","items","setItems","id","prevItems","filter","className","onChange","newInput","target","value","type","map","key","ReactDOM","render","document","getElementById"],"mappings":"8LAwCeA,MAtCf,SAAmBC,GACjB,MAAOC,EAAQC,GAAaC,oBAAS,GAMrC,OACEC,IAAAC,cAAA,MACEC,MAAO,CACLC,QAAS,OACTC,eAAgB,gBAChBC,WAAY,WAGdL,IAAAC,cAAA,QACEK,QAbN,WACER,EAAWS,IAAeA,IAatBL,MAAO,CACLM,KAAM,EACNC,OAAQ,UACRC,eAAgBb,EAAS,eAAiB,SAG3CD,EAAMe,MAGTX,IAAAC,cAAA,UACEK,QAAUM,IACRA,EAAMC,kBACNjB,EAAMkB,WAAWlB,EAAMmB,SAE1B,YCkBQC,MAjDf,WACE,MAAOC,EAAWC,GAAgBnB,mBAAS,KACpCoB,EAAOC,GAAYrB,mBAAS,IAcnC,SAASe,EAAWO,GAClBD,EAAUE,GAAcA,EAAUC,OAAO,CAACZ,EAAMI,IAAUA,IAAUM,IAGtE,OACErB,IAAAC,cAAA,OAAKuB,UAAU,aACbxB,IAAAC,cAAA,OAAKuB,UAAU,WACbxB,IAAAC,cAAA,UAAI,eAEND,IAAAC,cAAA,OAAKuB,UAAU,QACbxB,IAAAC,cAAA,SAAOwB,SAtBb,SAA2Bb,GACzB,MAAMc,EAAWd,EAAMe,OAAOC,MAC9BV,EAAaQ,IAoB2BE,MAAOX,EAAWY,KAAK,SAC3D7B,IAAAC,cAAA,UAAQK,QAlBd,WACEc,EAAUE,GACD,IAAIA,EAAWL,IAExBC,EAAa,MAePlB,IAAAC,cAAA,YAAM,SAGVD,IAAAC,cAAA,WACED,IAAAC,cAAA,UACGkB,EAAMW,IAAI,CAACnB,EAAMI,IAEdf,IAAAC,cAACN,EAAS,CACRoC,IAAKhB,EACLA,MAAOA,EACPJ,KAAMA,EACNG,WAAYA,S,KCpC5BkB,IAASC,OAAOjC,IAAAC,cAACe,EAAG,MAAKkB,SAASC,eAAe,U","file":"static/js/main.ec6e3479.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction TodoItems(props) {\r\n  const [isDone, setIsDone] = useState(false);\r\n\r\n  function handleClick() {\r\n    setIsDone((prevValue) => !prevValue);\r\n  }\r\n\r\n  return (\r\n    <li\r\n      style={{\r\n        display: \"flex\",\r\n        justifyContent: \"space-between\",\r\n        alignItems: \"center\",\r\n      }}\r\n    >\r\n      <span\r\n        onClick={handleClick}\r\n        style={{\r\n          flex: 1,\r\n          cursor: \"pointer\",\r\n          textDecoration: isDone ? \"line-through\" : \"none\",\r\n        }}\r\n      >\r\n        {props.item}\r\n      </span>\r\n\r\n      <button\r\n        onClick={(event) => {\r\n          event.stopPropagation(); \r\n          props.deleteItem(props.index);\r\n        }}\r\n      >\r\n        Delete\r\n      </button>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default TodoItems;\r\n","import React, { useState } from \"react\";\nimport TodoItems from \"./todoItems\";\nfunction App() {\n  const [inputText, setInputText] = useState(\"\");\n  const [items, setItems] = useState([]);\n\n  function handleInputChange(event) {\n    const newInput = event.target.value;\n    setInputText(newInput);\n  }\n\n  function addItems() {\n    setItems((prevItems) => {\n      return [...prevItems, inputText];\n    });\n    setInputText(\"\");\n  }\n\n  function deleteItem(id) {\n    setItems((prevItems) => prevItems.filter((item, index) => index !== id));\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"heading\">\n        <h1>To-Do List</h1>\n      </div>\n      <div className=\"form\">\n        <input onChange={handleInputChange} value={inputText} type=\"text\" />\n        <button onClick={addItems}>\n          <span>Add</span>\n        </button>\n      </div>\n      <div>\n        <ul>\n          {items.map((item, index) => {\n            return (\n              <TodoItems\n                key={index}\n                index={index}\n                item={item}\n                deleteItem={deleteItem}\n              />\n            );\n          })}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport './styles.css';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n//CHALLENGE: Make this app work by applying what you've learnt.\n//1. When new text is written into the input, its state should be saved.\n//2. When the add button is pressed, the current data in the input should be\n//added to an array.\n//3. The <ul> should display all the array items as <li>s\n"],"sourceRoot":""}